
Fist class:::

# CODING START:

CLASS 2:
CLASS qUEUE(OBJECT):
   def__init__(self):
     self.items = []
   def enqueue(seld, item)
     self.items.insert(0, item)
     
   def dequeue(self):
    if not self.items.pop()
    
   def is empty(self):
      return len(self.items) == 0
      
   def peek(self):
       if not self. is empty():
         return self.items[-1]. value
         
   def __len__(self):
       return self.size()
       
   def size(self):
       return len(self.items)
    
# class 1 coding:

class Node(object):
 def_init__(self, value):
   self.value = value
   self.left = None
   self.right = None
   
class BinaryTree(object):
  def__init__(self, root):
   self.root = Node(root)
   
   
   def print_tree(self, traversal type):
     if traversal_type =="preorder":
        return self.preorder_print(tree.root, "")
      
      elif traversal type =="inorder":
           return self.inorder print(tree.root, "")
           
       elif traversal type =="postorder":
           return self.postorder print(tree.root, "")
       elif traversal type == "levelorder":
           return self.levelorder_print(tree.root)
      else:
          print("Traversal type" + str(traversal_type) + " is not supported.")
          return False
        
   def preorder_print(self, start, traversal):
      """Root->Left->Right"""
      if start:
            traversal += (str(start.value) + "-")
            traversal = self.preorder_print(start.left, traversal)
            traversal= self.preorder print(start.right, traversal)
      return traversal
      
   
   def Inorder_print(self, start, traversal):
      """Left->Root->Right"""
      if start:
            traversal = self.inorder_print(start.left, traversal)
            traversal = (str(start.value) + "-")
            traversal= self.inorder_print(start.right, traversal)
      return traversal
      
      
   def postorder_print(self, start, traversal):
      """Left->Right->Root"""
      if start:
            traversal = self.inorder_print(start.left, traversal)
            traversal= self.inorder_print(start.right, traversal)
            traversal = (str(start.value) + "-")
    
      return traversal  
  
  #class 2 code:
  
    def levelorder_print (self, start) :
         if start is None:
            retuen
         queue = Queue()
         queue.enqueue(start)
         
         traversal = ""
         while len(queue) > 0:
             traversal += str(queue.peek ()) + "-"
             node = queue.dequeue()
             
             if node.left:
               queue.enqueue(node.left)
             if node.right:
                queue.enqueue(node.right)
     return traversal     ##end
  
   
               1
             /   \
           2       3
         /  \     /  \
        4     5  6     7
        
#set up tree:        
tree = BinaryTree(1)
tree.root.left = Node(2)
tree.root.right = Node(3)
tree.root.left.left = Node(4)
tree.root.left.right = Node(5)
tree.root.right.left = Node(6)
tree.root.right.right = Node(7)
tree.root.right.right.right = Node(8)

print(tree.print treee("preorder"))
print(tree.print treee("inorder"))
print(tree.print treee("postorder"))




#CODE ENDING.

Binary Tree Trversals:

 Trsversal: Process of visiting (checking and/or updating ) each node in a tree data structure, exactly once.
unlike linked lists, one dimensional arrays etc., which are canonically traversed in linear order, tree may be traversed in multiple ways. ///they may be traversed inn depth-firdt 
or breadth-first order.
There are three common ways to tranverse them in depth-first order:in-order,pre-order and post-order.
                                                                                                                     F
                                                                                                                  /     \
                                                                                                               B           G
                                                                                                             /   \           \
                                                                                                            A      D           I
                                                                                                                  /  \         /
                                                                                                                 C     E      H
   Pre-order Traversal:
1. Check if the current node is empty/null
2. Display the data part of the root(or current node).
3. Traverse the left subtree by recursively calling the pre-order function.
4. Traverse the right subtree by recursively calling the pre-order function.

Pre-order: F,B,A,D,C,E,G,I,H.

     In-order Traversal:
     
 1. Check if the current node is empty/null.
 2. Traversal the left subtree by recursiverly calling the in-order function.
 3. Disply the data part of the root (or current node).
 4. Traversal the right subtree by recursively calling the in-order function.

In-order: A,B,C,D,E,F,G,H,I.












